<Project Sdk="Microsoft.NET.Sdk.Razor">
  <PropertyGroup>
    <Title>Umbraco CMS - Static assets</Title>
    <Description>Contains the static assets needed to run Umbraco CMS.</Description>
    <AddRazorSupportForMvc>true</AddRazorSupportForMvc>
    <StaticWebAssetBasePath>/</StaticWebAssetBasePath>
    <CompressionEnabled>false</CompressionEnabled> <!-- Disable compression. E.g. for umbraco backoffice files. These files should be precompressed by node and not let dotnet handle it -->
    <EnableDefaultContentItems>false</EnableDefaultContentItems>
  </PropertyGroup>

  <PropertyGroup>
    <!--  TODO: [NU5123] Rename files so path is shorter and remove this override -->
    <WarningsNotAsErrors>NU5123</WarningsNotAsErrors>
  </PropertyGroup>

  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App" />
    <ProjectReference Include="..\Umbraco.Cms.Api.Management\Umbraco.Cms.Api.Management.csproj" />
    <ProjectReference Include="..\Umbraco.Web.Website\Umbraco.Web.Website.csproj" />
    <SupportedPlatform Include="browser" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="umbraco\**" />
    <Content Include="wwwroot\**" />
  </ItemGroup>

  <PropertyGroup>
    <BackofficeAssetsDirectory Condition="'$(BackofficeAssetsDirectory)' == ''">..\Umbraco.Web.UI.Client\</BackofficeAssetsDirectory>
    <LoginAssetsDirectory Condition="'$(LoginAssetsDirectory)' == ''">..\Umbraco.Web.UI.Login\</LoginAssetsDirectory>
    <BasePath>$(ProjectDir)wwwroot\umbraco</BasePath>
    <BackofficePath>$(BasePath)\backoffice</BackofficePath>
    <LoginPath>$(BasePath)\login</LoginPath>
  </PropertyGroup>

  <ItemGroup>
    <BackofficeAssetsInputs Include="$(BackofficeAssetsDirectory)package.json;$(BackofficeAssetsDirectory)package-lock.json;$(BackofficeAssetsDirectory)src\**" Exclude="$(DefaultItemExcludes)" />
    <LoginAssetsInputs Include="$(LoginAssetsDirectory)**" Exclude="$(DefaultItemExcludes)" />
  </ItemGroup>

  <Target Name="BuildStaticAssetsPreconditions" BeforeTargets="Build">
    <Message Text="Skip BuildBackoffice target because UmbracoBuild is '$(UmbracoBuild)' (this is not Visual Studio)" Importance="high" Condition="'$(UmbracoBuild)' != ''" />
    <Message Text="Skip BuildBackoffice target because '$(BackofficePath)' already exists" Importance="high" Condition="Exists('$(BackofficePath)')" />
    <Message Text="Call BuildBackoffice target because UmbracoBuild is empty (this is Visual Studio) and '$(BackofficePath)' doesn't exist" Importance="high" Condition="'$(UmbracoBuild)' == '' and !Exists('$(BackofficePath)')" />
    <CallTarget Targets="BuildBackoffice" Condition="'$(UmbracoBuild)' == '' and !Exists('$(BackofficePath)')" />

    <Message Text="Skip BuildLogin target because UmbracoBuild is '$(UmbracoBuild)' (this is not Visual Studio)" Importance="high" Condition="'$(UmbracoBuild)' != ''" />
    <Message Text="Skip BuildLogin target because '$(LoginPath)' already exists" Importance="high" Condition="Exists('$(LoginPath)')" />
    <Message Text="Call BuildLogin target because UmbracoBuild is empty (this is Visual Studio) and '$(LoginPath)' doesn't exist" Importance="high" Condition="'$(UmbracoBuild)' == '' and !Exists('$(LoginPath)')" />
    <CallTarget Targets="BuildLogin" Condition="'$(UmbracoBuild)' == '' and !Exists('$(LoginPath)')" />
  </Target>

  <Target Name="RestoreBackoffice" Inputs="$(BackofficeAssetsDirectory)package.json;$(BackofficeAssetsDirectory)package-lock.json" Outputs="$(BackofficeAssetsDirectory)node_modules\.package-lock.json">
    <Message Importance="high" Text="Restoring Backoffice NPM packages..." />
    <Exec Command="npm ci --no-fund --no-audit --prefer-offline" WorkingDirectory="$(BackofficeAssetsDirectory)" />
  </Target>

  <Target Name="BuildBackoffice" DependsOnTargets="RestoreBackoffice" BeforeTargets="AssignTargetPaths" Inputs="@(BackofficeAssetsInputs)" Outputs="$(IntermediateOutputPath)backoffice.complete.txt">
    <Message Importance="high" Text="Executing backoffice NPM build script..." />
    <Exec Command="npm run build:for:cms" WorkingDirectory="$(BackofficeAssetsDirectory)" />

    <ItemGroup>
      <_BackofficeAssetsBuildOutput Include="$(BackofficePath)/**" />

      <FileWrites Include="@(_BackofficeAssetsBuildOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)backoffice.complete.txt" />
    </ItemGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)backoffice.complete.txt" Lines="@(_BackofficeAssetsBuildOutput)" Overwrite="true" />
  </Target>

  <Target Name="RestoreLogin" Inputs="$(LoginAssetsDirectory)package.json;$(LoginAssetsDirectory)package-lock.json" Outputs="$(LoginAssetsDirectory)node_modules/.package-lock.json">
    <Message Importance="high" Text="Restoring Login NPM packages..." />
    <Exec Command="npm ci --no-fund --no-audit --prefer-offline" WorkingDirectory="$(LoginAssetsDirectory)" />
  </Target>

  <Target Name="BuildLogin" DependsOnTargets="RestoreLogin" BeforeTargets="AssignTargetPaths" Inputs="@(LoginAssetsInputs)" Outputs="$(IntermediateOutputPath)login.complete.txt">
    <Message Importance="high" Text="Executing Login NPM build script..." />
    <Exec Command="npm run build" WorkingDirectory="$(LoginAssetsDirectory)" />

    <ItemGroup>
      <_LoginAssetsBuildOutput Include="$(LoginPath)\**" />

      <FileWrites Include="@(_LoginAssetsBuildOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)login.complete.txt" />
    </ItemGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)login.complete.txt" Lines="@(_LoginAssetsBuildOutput)" Overwrite="true" />
  </Target>

  <Target Name="CleanStaticAssetsPreconditions" AfterTargets="Clean" Condition="'$(UmbracoBuild)' == ''">
    <Message Text="Skip CleanBackoffice target because '$(BackofficePath)' doesn't exist" Importance="high" Condition="!Exists('$(BackofficePath)')" />
    <Message Text="Skip CleanBackoffice target because preserve.backoffice marker file exists" Importance="high" Condition="Exists('$(BackofficePath)') and Exists('$(SolutionDir)preserve.backoffice')" />
    <Message Text="Call CleanBackoffice target because '$(BackofficePath)' exists and preserve.backoffice marker file doesn't exist" Importance="high" Condition="Exists('$(BackofficePath)') and !Exists('$(SolutionDir)preserve.backoffice')" />
    <CallTarget Targets="CleanBackoffice" Condition="Exists('$(BackofficePath)') and !Exists('$(SolutionDir)preserve.backoffice')" />

    <Message Text="Skip CleanLogin target because '$(LoginPath)' doesn't exist" Importance="high" Condition="!Exists('$(LoginPath)')" />
    <Message Text="Skip CleanLogin target because preserve.login marker file exists" Importance="high" Condition="Exists('$(LoginPath)') and Exists('$(SolutionDir)preserve.login')" />
    <Message Text="Call CleanLogin target because '$(LoginPath)' exists and preserve.login marker file doesn't exist" Importance="high" Condition="Exists('$(LoginPath)') and !Exists('$(SolutionDir)preserve.login')" />
    <CallTarget Targets="CleanLogin" Condition="Exists('$(LoginPath)') and !Exists('$(SolutionDir)preserve.login')" />
  </Target>

  <Target Name="CleanBackoffice">
    <ItemGroup>
      <BackofficeDirectories Include="$(BackofficePath)" />
    </ItemGroup>
    <RemoveDir Directories="@(BackofficeDirectories)" />
  </Target>

  <Target Name="CleanLogin">
    <ItemGroup>
      <LoginDirectories Include="$(LoginPath)" />
    </ItemGroup>
    <RemoveDir Directories="@(LoginDirectories)" />
  </Target>
</Project>
